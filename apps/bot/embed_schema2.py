# chatbot/management/commands/embed_schema.py
import re
import uuid
from django.core.management.base import BaseCommand
from .models import SchemaEmbedding
from django.conf import settings
from pgvector.django import Vector
import google.generativeai as genai

genai.configure(api_key="AIzaSyDCBstpJuWJiIvufkVkSuxk_KYtFsb47wk")


DDL = """
-- public.accounts_user definition -- Drop table -- DROP TABLE accounts_user; CREATE TABLE accounts_user ( "password" varchar(128) NOT NULL, is_superuser bool NOT NULL, username varchar(150) NOT NULL, first_name varchar(150) NOT NULL, last_name varchar(150) NOT NULL, is_staff bool NOT NULL, is_active bool NOT NULL, id uuid NOT NULL, email varchar(254) NOT NULL, phone varchar(20) NULL, is_verified bool NOT NULL, avatar varchar(100) NULL, date_joined timestamptz NOT NULL, last_login timestamptz NULL, CONSTRAINT accounts_user_email_key UNIQUE (email), CONSTRAINT accounts_user_phone_c603acdd_uniq UNIQUE (phone), CONSTRAINT accounts_user_pkey PRIMARY KEY (id), CONSTRAINT accounts_user_username_key UNIQUE (username) ); CREATE INDEX accounts_user_email_b2644a56_like ON public.accounts_user USING btree (email varchar_pattern_ops); CREATE INDEX accounts_user_phone_c603acdd_like ON public.accounts_user USING btree (phone varchar_pattern_ops); CREATE INDEX accounts_user_username_6088629e_like ON public.accounts_user USING btree (username varchar_pattern_ops); -- public.cart_cart definition -- Drop table -- DROP TABLE cart_cart; CREATE TABLE cart_cart ( id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL, user_id uuid NOT NULL, CONSTRAINT cart_cart_pkey PRIMARY KEY (id), CONSTRAINT cart_cart_user_id_key UNIQUE (user_id) ); -- public.cart_cart foreign keys ALTER TABLE public.cart_cart ADD CONSTRAINT cart_cart_user_id_9b4220b9_fk_accounts_user_id FOREIGN KEY (user_id) REFERENCES accounts_user(id) DEFERRABLE INITIALLY DEFERRED; -- public.cart_cartitem definition -- Drop table -- DROP TABLE cart_cartitem; CREATE TABLE cart_cartitem ( id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL, quantity int4 NOT NULL, cart_id int8 NOT NULL, product_id uuid NOT NULL, is_removed bool NOT NULL, CONSTRAINT cart_cartitem_pkey PRIMARY KEY (id), CONSTRAINT cart_cartitem_quantity_check CHECK ((quantity >= 0)) ); CREATE INDEX cart_cartitem_cart_id_370ad265 ON public.cart_cartitem USING btree (cart_id); CREATE INDEX cart_cartitem_product_id_b24e265a ON public.cart_cartitem USING btree (product_id); -- public.cart_cartitem foreign keys ALTER TABLE public.cart_cartitem ADD CONSTRAINT cart_cartitem_cart_id_370ad265_fk_cart_cart_id FOREIGN KEY (cart_id) REFERENCES cart_cart(id) DEFERRABLE INITIALLY DEFERRED; ALTER TABLE public.cart_cartitem ADD CONSTRAINT cart_cartitem_product_id_b24e265a_fk_products_product_id FOREIGN KEY (product_id) REFERENCES products_product(id) DEFERRABLE INITIALLY DEFERRED; -- public.orders_order definition -- Drop table -- DROP TABLE orders_order; CREATE TABLE orders_order ( id uuid NOT NULL, order_number varchar(20) NOT NULL, status varchar(20) NOT NULL, payment_status varchar(20) NOT NULL, subtotal numeric(10, 2) NOT NULL, tax_amount numeric(10, 2) NOT NULL, shipping_amount numeric(10, 2) NOT NULL, discount_amount numeric(10, 2) NOT NULL, total_amount numeric(10, 2) NOT NULL, shipping_name varchar(200) NOT NULL, shipping_phone varchar(20) NOT NULL, shipping_address text NOT NULL, billing_name varchar(200) NOT NULL, billing_phone varchar(20) NOT NULL, billing_address text NOT NULL, payment_method varchar(50) NOT NULL, payment_reference varchar(100) NULL, tracking_number varchar(100) NULL, created_at timestamptz NOT NULL, updated_at timestamptz NOT NULL, shipped_at timestamptz NULL, delivered_at timestamptz NULL, user_id uuid NOT NULL, CONSTRAINT orders_order_order_number_key UNIQUE (order_number), CONSTRAINT orders_order_pkey PRIMARY KEY (id) ); CREATE INDEX orders_order_order_number_4e985f70_like ON public.orders_order USING btree (order_number varchar_pattern_ops); CREATE INDEX orders_order_user_id_e9b59eb1 ON public.orders_order USING btree (user_id); -- public.orders_order foreign keys ALTER TABLE public.orders_order ADD CONSTRAINT orders_order_user_id_e9b59eb1_fk_accounts_user_id FOREIGN KEY (user_id) REFERENCES accounts_user(id) DEFERRABLE INITIALLY DEFERRED; -- public.orders_orderitem definition -- Drop table -- DROP TABLE orders_orderitem; CREATE TABLE orders_orderitem ( id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL, product_name varchar(200) NOT NULL, product_price numeric(10, 2) NOT NULL, quantity int4 NOT NULL, subtotal numeric(10, 2) NOT NULL, order_id uuid NOT NULL, product_id uuid NOT NULL, CONSTRAINT orders_orderitem_pkey PRIMARY KEY (id), CONSTRAINT orders_orderitem_quantity_check CHECK ((quantity >= 0)) ); CREATE INDEX orders_orderitem_order_id_fe61a34d ON public.orders_orderitem USING btree (order_id); CREATE INDEX orders_orderitem_product_id_afe4254a ON public.orders_orderitem USING btree (product_id); -- public.orders_orderitem foreign keys ALTER TABLE public.orders_orderitem ADD CONSTRAINT orders_orderitem_order_id_fe61a34d_fk_orders_order_id FOREIGN KEY (order_id) REFERENCES orders_order(id) DEFERRABLE INITIALLY DEFERRED; ALTER TABLE public.orders_orderitem ADD CONSTRAINT orders_orderitem_product_id_afe4254a_fk_products_product_id FOREIGN KEY (product_id) REFERENCES products_product(id) DEFERRABLE INITIALLY DEFERRED; -- public.products_product definition -- Drop table -- DROP TABLE products_product; CREATE TABLE products_product ( id uuid NOT NULL, "name" varchar(200) NOT NULL, description text NOT NULL, price numeric(10, 2) NOT NULL, original_price numeric(10, 2) NULL, is_featured bool NOT NULL, is_active bool NOT NULL, stock_quantity int4 NOT NULL, sku varchar(100) NOT NULL, rating numeric(3, 2) NOT NULL, review_count int4 NOT NULL, created_at timestamptz NOT NULL, updated_at timestamptz NOT NULL, category_id uuid NOT NULL, color varchar(50) NULL, CONSTRAINT products_product_pkey PRIMARY KEY (id), CONSTRAINT products_product_review_count_check CHECK ((review_count >= 0)), CONSTRAINT products_product_sku_key UNIQUE (sku), CONSTRAINT products_product_stock_quantity_check CHECK ((stock_quantity >= 0)) ); CREATE INDEX products_product_category_id_9b594869 ON public.products_product USING btree (category_id); CREATE INDEX products_product_sku_3c51a516_like ON public.products_product USING btree (sku varchar_pattern_ops); -- public.products_product foreign keys ALTER TABLE public.products_product ADD CONSTRAINT products_product_category_id_9b594869_fk_products_category_id FOREIGN KEY (category_id) REFERENCES products_category(id) DEFERRABLE INITIALLY DEFERRED; -- public.products_category definition -- Drop table -- DROP TABLE products_category; CREATE TABLE products_category ( id uuid NOT NULL, "name" varchar(100) NOT NULL, description text NOT NULL, image varchar(100) NULL, is_active bool NOT NULL, created_at timestamptz NOT NULL, CONSTRAINT products_category_pkey PRIMARY KEY (id) );
"""


class Command(BaseCommand):
    help = "Embed Postgres schema into pgvector for RAG."

    def handle(self, *args, **kwargs):
        # split table definitions
        tables = re.split(r'-- public\.', DDL)
        for t in tables:
            if not t.strip():
                continue
            lines = [line.strip() for line in t.splitlines() if line.strip()]
            
            # Table name (from CREATE TABLE ...)
            table_match = re.search(r'CREATE TABLE (\w+)\s*\(', t, re.IGNORECASE)
            if not table_match:
                continue
            table_name = table_match.group(1)

            for line in lines:
                if line.upper().startswith("CREATE TABLE") or line.startswith("--"):
                    continue
                if line.startswith("CONSTRAINT") or line.startswith("ALTER"):
                    continue
                if line.startswith(")"):
                    continue

                # Extract column definition
                parts = line.split()
                if not parts:
                    continue
                col_name = parts[0].strip('"')
                definition = " ".join(parts[1:]).rstrip(",")
                object_name = f"{table_name}.{col_name}"

                text_to_embed = f"Column {col_name} in table {table_name}: {definition}"

                # Generate embedding from Gemini
                emb = genai.embed_content(
                    model="models/text-embedding-004",
                    content=text_to_embed,
                )["embedding"]

                SchemaEmbedding.objects.update_or_create(
                    object_name=object_name,
                    defaults={
                        "definition": definition,
                        "embedding": Vector(emb),
                    },
                )
                self.stdout.write(self.style.SUCCESS(f"Embedded {object_name}"))
